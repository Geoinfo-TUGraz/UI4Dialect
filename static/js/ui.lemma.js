/** Gets executed when a lemma is selected in the autocomplete */
function selectLemmaInAutocomplete() {
	//Show loading graphic
	$("#spinner-lemma").show();

	//Get values from control elements
	var lemmaId = $("#autocomplete-lemma").attr('data-lemma-id');

	disableAllControlElementsOnSite();
	ajaxRequestForLemma(lemmaId);
}

/** Performs ajax request for loading lemma data from database and creates a layer from it */
function ajaxRequestForLemma(lemmaId) {
	$.ajax({
		url: '/searchLemma',
		type: 'POST',
		contentType: "application/json",
		data: JSON.stringify({ "lemmaId": lemmaId })
	}).done(function (lemmaGeoJSON_str) {

		var colorValueOfLayer = "#0083ae";

		//Parse GeoJSON to json object
		var lemmaGeoJSON = JSON.parse(lemmaGeoJSON_str);

		//Get values from GeoJSON file
		var lemma = lemmaGeoJSON.features[0].properties.lemmaDBO;
		var standardGerman = lemmaGeoJSON.features[0].properties.hochdeutsch;
		var dbpedia = lemmaGeoJSON.features[0].properties.dbpedia;

		//Create Leaflet Layer from GeoJSON
		var lemmaLayer = L.geoJson(lemmaGeoJSON, {
			onEachFeature: function (feature, layer) {
				//Create Popup
				var locationName = feature.properties.lokationName;
				var popString = "<div><p class='popup-title'>" + locationName + "</p><p class='popup-text'>" + lang.record_s + "</p><ul class='popup-list-items'>";

				for (const [recordId, recordDescription] of Object.entries(feature.properties.belege)) {
					popString += "<li><a href='#' data-record-id='" + recordId + "'>" + recordDescription + "</a></li>"
				}

				// specify popup options 
				var popupOptions =
				{
					'className': 'custom-popup-style'
				}
				popString += "</ul></div>"

				//Create click event for popup and bind popup
				layer.bindPopup($(popString).click(function (e) {
					popupClickLemma(e);
				})[0], popupOptions);

			},
			style: function (feature) {
				return { stroke: true, fill: true };
			},
			pointToLayer: function (feature, latlng) {
				if (!isPoint00(feature.geometry.coordinates)) {
					return L.circleMarker(latlng, { fillColor: colorValueOfLayer, color: colorValueOfLayer, stroke: true, fill: true });
				}
				else {
					//Doesn't work properly
					return L.circleMarker(latlng, { stroke: false, fill: false });
				}
			}
		}).addTo(mymap);

		//Set Layer ID generated by leaflet
		lemmaLayer.id = lemmaLayer._leaflet_id;

		//Hide empty geometries
		mymap.eachLayer(function (datalayer) {
			if (datalayer.id == lemmaLayer.id) {
				datalayer.eachLayer(function (layer) {
					//Empty geometries --> hide them on the map
					if (isPoint00(layer.feature.geometry.coordinates)) {
						layer.setStyle({ stroke: false, fill: false })
					}
				});
			}
		});

		flyToLayer(lemmaLayer.id)

		//Check if GeoJSON has a geometry = check if lemma is assigned to a location
		if (lemmaGeoJSON.features[0].properties.lokationTyp == "noLocation") {
			alert(lang.loadInfoNoLocation);
		}

		htmlData = createHTMLCodeForSearchresultLemma(lemma, standardGerman, dbpedia, lemmaGeoJSON, lemmaLayer.id, colorValueOfLayer)
		addDataToSearchresult(lemmaLayer.id, lemma, htmlData);
		setColorOfTab(colorValueOfLayer, lemmaLayer.id);
		addNumberOfGeofeaturesToSelectoptions(lemmaGeoJSON, lemmaLayer.id);
		highlightLeafletLayer(lemmaLayer.id);

		//Add classes for lemma to searchresult div	
		$('#searchresult').addClass('searchresult-location-lemma');
		$('#searchresult-tabs').addClass('highlightable-tabs');

	}).fail(function (jqXHR, textStatus, errorThrown) {
		$("#errorbox").html(lang.loadErrorLemma + errorThrown);
		$("#errorbox").addClass("fade_animation").on('animationend', function (e) {
			$(this).removeClass("fade_animation").off('animationend');
		});
	}).always(function (jqXHR, textStatus) {
		//Hide loading graphic
		$("#spinner-lemma").hide();

		//Enable all control elements
		enableAllControlElementsOnSite();
	});
}


function addNumberOfGeofeaturesToSelectoptions(geojson, layerLemmaID) {

	const [countPlace, countMunicipality, countRegion] = getFeaturesPerLocationtypeFromGeojson(geojson);

	//Add amount of features per selectoption
	$('#select-filter-lemma-' + layerLemmaID + ' option:contains("' + lang.showPlace + '")').text(lang.showPlace + ' (' + countPlace.toString() + ')');
	$('#select-filter-lemma-' + layerLemmaID + ' option:contains("' + lang.showMunicipality + '")').text(lang.showMunicipality + ' (' + countMunicipality.toString() + ')');
	$('#select-filter-lemma-' + layerLemmaID + ' option:contains("' + lang.showRegion + '")').text(lang.showRegion + ' (' + countRegion.toString() + ')');
}

function getFeaturesPerLocationtypeFromGeojson(geojson) {
	var countPlace = 0;
	var countMunicipality = 0;
	var countRegion = 0;

	for (i = 0; i < Object.keys(geojson.features).length; i++) {
		var locationType = geojson.features[i].properties.lokationTyp;

		switch (locationType) {
			case "place": countPlace++; break;
			case "municipality": countMunicipality++; break;
			case "region": countRegion++; break;
		}
	}

	return [countPlace, countMunicipality, countRegion]
}

function createHTMLCodeForSearchresultLemma(lemma, standardGerman, dbpedia, lemmaGeoJSON, layerId, colorValue) {
	var htmlData = "";

	//Table
	htmlData += "<h5 style='margin-top: 10px;'>" + lang.details + "</h5>"
	htmlData += "<table><tr><th>" + lang.lemma + "</th><td>" + lemma + "</td></tr>"
	htmlData += "<tr><th>" + lang.standardGerman + "</th><td>" + standardGerman + "</td></tr>"
	htmlData += "<tr><th>" + lang.dbpedia + "</th><td><a href='" + dbpedia + "'target='_blank'>" + dbpedia + "</a></td></tr>"
	htmlData += "</table>"

	htmlData += "<hr>"

	//Filter Geometry Level
	htmlData += '<h5>' + lang.filter + '</h5>'
	htmlData += '<select class="form-select select-filter-lemma" id="select-filter-lemma-' + layerId + '" style="padding-left: 0.2rem; padding-right: 1.9rem;margin-bottom: 15px;">'
	htmlData += '<option value="1" selected="selected">' + lang.showAll + '</option>'
	htmlData += '<option value="2">' + lang.showPlace + '</option>'
	htmlData += '<option value="3">' + lang.showMunicipality + '</option>'
	htmlData += '<option value="4">' + lang.showRegion + '</option>'
	htmlData += '</select>'

	//Filter places
	htmlData += "<div class='div-filter-places'>"
	htmlData += "<select class='form-select select-location-for-lemma'>";
	htmlData += "<option disabled selected value>" + lang.selectPlace + "</option>";
	for (i = 0; i < Object.keys(lemmaGeoJSON.features).length; i++) {
		var locationType = lemmaGeoJSON.features[i].properties.lokationTyp;

		if (locationType == "place") {
			var placeId = lemmaGeoJSON.features[i].properties.lokationId;
			var placeName = lemmaGeoJSON.features[i].properties.lokationName;
			var coordinates = lemmaGeoJSON.features[i].geometry.coordinates;

			if (isPoint00(coordinates)) {
				//Make select option disabled if point is (0,0)
				htmlData += "<option disabled title='" + lang.noGeometry + "' data-location-id='" + placeId + "'>" + placeName + "</option>"
			}
			else {
				htmlData += "<option value='" + placeId + "'>" + placeName + "</option>"
			}

		}
	}
	htmlData += "</select ></div>"

	//Filter municipalities
	htmlData += "<div class='div-filter-municipalities'>"
	htmlData += "<select class='form-select select-location-for-lemma'>";
	htmlData += "<option disabled selected value>" + lang.selectMunicipality + "</option>";
	for (i = 0; i < Object.keys(lemmaGeoJSON.features).length; i++) {
		var locationType = lemmaGeoJSON.features[i].properties.lokationTyp;

		if (locationType == "municipality") {
			var municipalityId = lemmaGeoJSON.features[i].properties.lokationId;
			var municipalityName = lemmaGeoJSON.features[i].properties.lokationName;
			var coordinates = lemmaGeoJSON.features[i].geometry.coordinates;

			if (isPoint00(lemmaGeoJSON.features[i].geometry.coordinates)) {
				//Make select option disabled if point is (0,0)
				htmlData += "<option disabled title='" + lang.noGeometry + "' data-location-id='" + municipalityId + "'>" + municipalityName + "</option>"
			}
			else {
				htmlData += "<option value='" + municipalityId + "'>" + municipalityName + "</option>"
			}
		}
	}
	htmlData += "</select ></div>"

	//Filter regions
	htmlData += "<div class='div-filter-regions'>"
	htmlData += "<select class='form-select select-location-for-lemma'>";
	htmlData += "<option disabled selected value>" + lang.selectRegion + "</option>";
	for (i = 0; i < Object.keys(lemmaGeoJSON.features).length; i++) {
		var locationType = lemmaGeoJSON.features[i].properties.lokationTyp;

		if (locationType == "region") {
			var regionId = lemmaGeoJSON.features[i].properties.lokationId;
			var regionName = lemmaGeoJSON.features[i].properties.lokationName;

			if (isPoint00(lemmaGeoJSON.features[i].geometry.coordinates)) {
				//Make select option disabled if point is (0,0)
				htmlData += "<option disabled title='" + lang.noGeometry + "' data-location-id='" + regionId + "'>" + regionName + "</option>"
			}
			else {
				htmlData += "<option value='" + regionId + "'>" + regionName + "</option>"
			}
		}

	}
	htmlData += "</select ></div><hr></br>"

	//color-picker
	htmlData += "<label class='label-style' style='vertical-align: middle'>" + lang.layercolor + "<input type='color' class='color-picker' value='" + colorValue + "'></label></br></br>"

	//Footer buttons
	htmlData += "<button class='btn-add-layer-to-layercontrol btn-success btn-footer' data-is-disabled='false' title='" + lang.saveLayer + "'><i class='bi bi-bookmark-plus'></br>" + lang.saveLayer + "</i></button>";
	htmlData += "<button class='btn-change-tabname btn-success btn-footer' title='" + lang.renameLayer + "'><i class='bi bi-pencil'></br>" + lang.renameLayer + "</i></button>";
	htmlData += "<button class='btn-download-geojson btn-success btn-footer' data-is-disabled='false' title='" + lang.downloadGeojson + "'><i class='bi bi-download'></br>" + lang.downloadGeojson + "</i></button>";

	return htmlData;
}



/** Select a place, municipality or region in the select controls */
$(document).on('change', '.select-location-for-lemma', function (e) {
	//Get location id of selected location
	var targetLocationId = e.target.value;

	//Reset all filters
	$(".select-location-for-lemma").val($(".select-location-for-lemma option:first").val());

	//Set Value for filter again
	$(this).val(targetLocationId);

	var layerId = $(this).parent().parent().attr("data-layer-id"); //get corresponding layer id

	flyToFeature(layerId, targetLocationId);
});

/** Select that only cities, municipalities, regions or all geometries should be visible */
$(document).on('change', '.select-filter-lemma', function (e) {

	var valFilter = e.target.value;
	var layerId = $(this).parent().attr("data-layer-id");

	//Reset all filters
	$(".select-location-for-lemma").val($(".select-location-for-lemma option:first").val());

	var count = 0;

	//Loop through all layers on the map
	mymap.eachLayer(function (datalayer) {
		if (datalayer.id == layerId) {

			//Distinct between show all(1), show only cities(2), only municipalities (3) or only regions (4)
			switch (valFilter) {
				case '1': //show all
					datalayer.eachLayer(function (layer) {
						//Set stroke and fill true for all polygons, except the ones without a real geometry
						if (!isPoint00(layer.feature.geometry.coordinates)) {
							layer.setStyle({ stroke: true, fill: true })
							layer.closePopup();
						}
					});

					flyToLayer(layerId)

					//Show all filters
					$(".div-filter-places").show();
					$(".div-filter-municipalities").show();
					$(".div-filter-regions").show();
					break;

				case '2': //show places
					datalayer.eachLayer(function (layer) {
						//Set stroke and fill true only for places
						if (layer.feature.properties.lokationTyp == 'place' && !isPoint00(layer.feature.geometry.coordinates)) {
							layer.setStyle({ stroke: true, fill: true })
						}
						else {
							layer.setStyle({ stroke: false, fill: false })
						}
						layer.closePopup();
					});

					//Show only places filter
					$(".div-filter-places").show();
					$(".div-filter-municipalities").hide();
					$(".div-filter-regions").hide();
					break;

				case '3': //Show municipalities
					datalayer.eachLayer(function (layer) {
						//Set stroke and fill true only for municipalities
						if (layer.feature.properties.lokationTyp == 'place') {
							layer.setStyle({ stroke: false, fill: false })
						}
						else if (layer.feature.properties.lokationTyp == 'municipality' && !isPoint00(layer.feature.geometry.coordinates)) {
							layer.setStyle({ stroke: true, fill: true })
						}
						else {
							layer.setStyle({ stroke: false, fill: false })
						}
						layer.closePopup();
					});

					//Show only municipality filter
					$(".div-filter-places").hide() //make div visible
					$(".div-filter-municipalities").show();
					$(".div-filter-regions").hide();
					break;

				case '4': //show regions
					datalayer.eachLayer(function (layer) {
						//Set stroke and fill true only for region
						if (layer.feature.properties.lokationTyp == 'place') {
							layer.setStyle({ stroke: false, fill: false })
						}
						else if (layer.feature.properties.lokationTyp == 'municipality') {
							layer.setStyle({ stroke: false, fill: false })
						}
						else {
							if (!isPoint00(layer.feature.geometry.coordinates)) {
								layer.setStyle({ stroke: true, fill: true })
							}

						}
						layer.closePopup();
					});

					//Show only region filter
					$(".div-filter-places").hide()
					$(".div-filter-municipalities").hide();
					$(".div-filter-regions").show();
					break;
			}
		}
	});

});


/** Listens to click on popup link for lemma */
function popupClickLemma(e) {

	//Check if link is clicked
	if ($(e.target).closest('a').length) {

		//Get record id and dialect word
		var recordId = e.target.getAttribute('data-record-id');
		var recordDescription = e.target.innerText;
		var source = 'lemma'

		//Load data for selected record
		ajaxRequestForRecorddetails(recordId, recordDescription, source);
	}
};

/** Restores the attribute data when layer is re-enabled in layerControl */
function restoreSearchresultLemma(layer) {

	//Get GeoJSON from leaflet layer
	var lemmaData = layer.toGeoJSON();
	//Get Color value of the layer
	var colorValueOfLayer = getColorFromLayer(layer.id);

	//Get data from GeoJSON
	lemma = lemmaData.features[0].properties.lemmaDBO;
	standardGerman = lemmaData.features[0].properties.hochdeutsch;
	dbpedia = lemmaData.features[0].properties.dbpedia;

	tabText = getLayernameFromLayerControl(layer.id)
	htmlData = createHTMLCodeForSearchresultLemma(lemma, standardGerman, dbpedia, lemmaData, layer.id, colorValueOfLayer);
	addDataToSearchresult(layer.id, tabText, htmlData);
	setColorOfTab(colorValueOfLayer, layer.id);
	highlightLeafletLayer(layer.id);
	addNumberOfGeofeaturesToSelectoptions(lemmaData, layer.id)
	flyToLayer(layer.id);
	disableAddLayerButton(layer.id);

	//Add additional classes
	$('#searchresult').addClass('searchresult-location-lemma');
	$('#searchresult-tabs').addClass('highlightable-tabs');

	//Set all geometries visible for this layer, except the ones with geometry Point(0,0)
	mymap.eachLayer(function (datalayer) {
		if (datalayer.id == layer.id) {
			datalayer.eachLayer(function (elayer) {
				if (!isPoint00(elayer.feature.geometry.coordinates)) { elayer.setStyle({ stroke: true, fill: true }) }

			});

		}
	});
}