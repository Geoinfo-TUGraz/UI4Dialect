/** Gets called, when user selects a location in autocomplete */
function selectLocationInAutocomplete() {
	//Show loading graphic
	$("#spinner-location").show();

	//Get values from control elements
	var locationLevel = document.getElementById("select-location").value;
	var locationId = $("#autocomplete-location").attr('data-location-id');
	var locationName = document.getElementById("autocomplete-location").value;

	//Set all control elements to readonly
	disableAllControlElementsOnSite();

	//Load data for selected location
	ajaxRequestForLocation(locationId, locationName, locationLevel);

};

/** Performs ajax request for loading location data from database and creates a layer from it */
function ajaxRequestForLocation(locationId, locationName, locationLevel) {
	$.ajax({
		url: '/searchLocation',
		type: 'POST',
		contentType: "application/json",
		data: JSON.stringify({ locationId: locationId, locationLevel: locationLevel })
	}).done(function (locationGeoJSON_str) {

		var locationGeoJSON = JSON.parse(locationGeoJSON_str);
		locationGeoJSON.features[0].properties.lokationName = locationName;

		//Get values from GeoJSON file
		var records = locationGeoJSON.features[0].properties.belege;
		var locations = locationGeoJSON.features[0].properties.lokationen;
		var people = locationGeoJSON.features[0].properties.personen;
		var geom = locationGeoJSON.features[0].geometry;

		deleteAllLayersFromMap();

		//Create Leaflet Layer from GeoJSON
		var locationLayer = L.geoJSON(locationGeoJSON, {
			style: function () {
				return {
					color: '#0083ae'
				}
			},
			pointToLayer: function (feature, latlng) {
				if (!isPoint00(feature.geometry.coordinates)) {
					return L.circleMarker(latlng, { fillColor: '#0083ae', color: '#0083ae', stroke: true, fill: true });
				}
				else {
					return L.circleMarker(latlng, { stroke: false, fill: false });
				}
			}
		}).addTo(mymap);

		//Bind Popup
		locationLayer.bindPopup(locationName.toString());

		//Set Layer ID generated by leaflet
		locationLayer.id = locationLayer._leaflet_id;

		//Fly to geometry
		flyToLayer(locationLayer.id)
		//Check if location has a geometry
		if (isPoint00(geom.coordinates)) { alert(lang.loadInfoGeometry); }

		//Create HTML code for the searchresult div
		htmlData = createHTMLCodeForSearchresultLocation(records, locations, people, locationName);

		//Add the data to the searchresult div
		addDataToSearchresult_simple(htmlData);

		//Add additional classes
		$('#searchresult').addClass('searchresult-location-lemma');

	}).fail(function (jqXHR, textStatus, errorThrown) {
		$("#errorbox").html(lang.loadErrorLocation + errorThrown);
		$("#errorbox").addClass("fade_animation").on('animationend', function (e) {
			$(this).removeClass("fade_animation").off('animationend');
		});
	}).always(function (jqXHR, textStatus) {
		//Hide loading graphic
		$("#spinner-location").hide();

		//Enable all control elements
		enableAllControlElementsOnSite();
	});
}

function createHTMLCodeForSearchresultLocation(records, locations, people, locationName) {

	var htmlData = "<p class='header-searchresult-simple'>" + locationName + "<button id='button-close-searchresult'><span class='span-close-simple' title='" + lang.closeTab + "'>Ã—</span></button></p> ";
	htmlData += "<h5 style='margin-top: 10px;'>" + lang.records + "</h5>";

	//Create Button Group with Dialect Records / Words
	htmlData += "<div class='btn-group-vertical'>";
	if (Object.keys(records).length > 0) {
		for (const [recordId, recordDescription] of Object.entries(records)) {
			htmlData += "<button type='button' class='btn button-record' data-source='location' data-record-id='" + recordId + "'>" + recordDescription + " </button>";
		}
	}
	else {
		htmlData += "<p>" + lang.noData + "</p>";
	}
	htmlData += "</div><hr>";


	//Create unordered lists for places, municipalities, regions
	htmlData += "<div class='location-unordered-lists'><p></p>";
	//Regions
	if (Object.keys(locations.regionen).length > 0) {
		htmlData += "<h5>" + lang.region + "</h5>";
		htmlData += "<ul>";

		for (const [regionId, regionName] of Object.entries(locations.regionen)) {
			htmlData += "<li><a class=unordered-list-region data-region-id='" + regionId + "' href='#'>" + regionName + "</a></li>";
		}
		htmlData += "</ul><br>";
	}
	//Municipalities
	if (Object.keys(locations.gemeinden).length > 0) {
		if (Object.keys(locations.orte).length > 0) {
			htmlData += "<h5>" + lang.municipalities + "</h5>";
		}
		else {
			htmlData += "<h5>" + lang.municipality + "</h5>";
		}
		htmlData += "<ul>";

		for (const [municipalityId, municipalityName] of Object.entries(locations.gemeinden)) {
			htmlData += "<li ><a class=unordered-list-municipality data-municipality-id='" + municipalityId + "' href='#'>" + municipalityName + "</a></li>";
		}
		htmlData += "</ul><br>";
	}
	//Places
	if (Object.keys(locations.orte).length > 0) {
		htmlData += "<h5>" + lang.places + "</h5>";
		htmlData += "<ul>";

		for (const placeId of Object.keys(locations.orte)) {
			htmlData += "<li ><a class=unordered-list-place data-place-id='" + placeId + "' data-municipality=\"" + locations.orte[placeId][1] + "\" href='#'>" + locations.orte[placeId][0] + "</a></li>";
		}
		htmlData += "</ul><br>";
	}

	//People born
	htmlData += "<h5>" + lang.peopleBorn + "</h5>";
	if (people.geboren.length > 0) {
		htmlData += "<ul class='unordered-list-peope-born'>";
		for (i = 0; i < people.geboren.length; i++) {
			htmlData += "<li>" + people.geboren[i] + "</li>";
		}
		htmlData += "</ul>";
	}
	else {
		htmlData += "<p>" + lang.noData + "</p>";
	}

	htmlData += "<br>";

	//People died
	htmlData += "<h5>" + lang.peopleDied + "</h5>";
	if (people.gestorben.length > 0) {
		htmlData += "<ul class='unordered-list-peope-died'>";
		for (i = 0; i < people.gestorben.length; i++) {
			htmlData += "<li>" + people.gestorben[i] + "</li>";
		}
		htmlData += "</ul>";
	}
	else {
		htmlData += "<p>" + lang.noData + "</p>";
	}
	htmlData += "</div>";

	return htmlData;
};

/** Listens to clicks on corresponding places, municipalities, regions in unordered list */
$(document).on('click', '.unordered-list-region', function (e) {
	//Get values from target
	var regionId = e.target.getAttribute('data-region-id');
	var regionName = e.target.innerText

	//Set values of autocomplete and select
	document.getElementById("autocomplete-location").value = regionName;
	document.getElementById("select-location").value = 3;

	//Trigger the change event of the select
	$("#select-location").trigger("change");
	//Set the locationId of autocomplete
	$("#autocomplete-location").attr('data-location-id', regionId);

	//Trigger the function
	selectLocationInAutocomplete();
});
$(document).on('click', '.unordered-list-municipality', function (e) {
	var municipalityId = e.target.getAttribute('data-municipality-id');
	var municipalityName = e.target.innerText

	document.getElementById("autocomplete-location").value = municipalityName;
	document.getElementById("select-location").value = 2;

	$("#select-location").trigger("change");
	$("#autocomplete-location").attr('data-location-id', municipalityId);

	selectLocationInAutocomplete();
});
$(document).on('click', '.unordered-list-place', function (e) {
	var placeId = e.target.getAttribute('data-place-id');
	var placeName = e.target.innerText;
	var municipalityName = e.target.getAttribute('data-municipality');

	document.getElementById("autocomplete-location").value = placeName.toString() + " (Gem. " + municipalityName + ")";
	document.getElementById("select-location").value = 1;

	$("#select-location").trigger("change");
	$("#autocomplete-location").attr('data-location-id', placeId);

	selectLocationInAutocomplete();
});

/** Adds queried data to searchresult (simple ui) */
function addDataToSearchresult_simple(htmlCode) {
	$('#searchresult').html("<div>" + htmlCode + "</div>")
	$("#searchresult").show();
}

/** Click on (x) in simple ui */
$(document).on('click', '.span-close-simple', function (e) {
	$("#searchresult").hide();
	deleteAllLayersFromMap();
});