/** Performs ajax request for searching similar dialect words and create a layer from it */
function ajaxRequestForSimilaritySearch(inputValue, levenshteinValue, levenshteinSelect) {
	$.ajax({
		url: '/searchSimilarity',
		type: 'POST',
		contentType: "application/json",
		data: JSON.stringify({ "inputValue": inputValue, "levenshteinValue": levenshteinValue, "levenshteinSelect": levenshteinSelect })
	}).done(function (levenshteinGeoJSON_str) {

		currentlyActiveOption = 'levenshtein'; //Set currently active option
		info.onAdd = onAddInfo;

		//Method to update the control based on feature properties passed
		info.update = updateInfo;

		info.addTo(mymap);

		//Parse GeoJSON into object
		levenshteinGeoJSON = JSON.parse(levenshteinGeoJSON_str);

		//Check if GeoJSON has features
		if (Object.keys(levenshteinGeoJSON.features).length > 0) {

			//Create Leaflet Layer from GeoJSON
			levenshteinLayer = L.geoJson(levenshteinGeoJSON, {
				style: style,
				pointToLayer: stylePoint,
				onEachFeature: onEachFeature
			}).addTo(mymap);

			//Set Layer ID generated by Leaflet
			levenshteinLayer.id = levenshteinLayer._leaflet_id;

			//Create HTML code for the searchresult div
			htmlData = createHTMLCodeForSearchresultLevenshtein(levenshteinGeoJSON);
			addDataToSearchresult(levenshteinLayer.id, inputValue + " (" + levenshteinValue + ")", htmlData);
			
			//Add additional class
			$('#searchresult').addClass('searchresult-levenshtein');

			//Add legend
			legend.onAdd = onAddLegend;
			legend.addTo(mymap);

			//Fly to geometry
			flyToLayer(levenshteinLayer.id)

			//Set Color of tab
			setColorOfTab("#ececec", levenshteinLayer.id)
		}
		else {
			alert(lang.loadInfoData);
		}

	}).fail(function (jqXHR, textStatus, errorThrown) {
		$("#errorbox").html(lang.loadErrorLevenshtein + errorThrown);
		$("#errorbox").addClass("fade_animation").on('animationend', function (e) {
			$(this).removeClass("fade_animation").off('animationend');
		});
	}).always(function (jqXHR, textStatus) {
		$("#spinner-levenshtein").hide();
		enableAllControlElementsOnSite();
	});
}

/** Click on Search button */
$(document).on('click', '#btn-levenshtein', function (e) {

	//Check if there is text in the input box
	if (!$("#input-levenshtein").val()) {
		$("#input-levenshtein").css("background-color", "rgb(255, 143, 143)");
	}
	else {
		//Show loading graphic
		$("#spinner-levenshtein").show();

		//Get values from control elements
		var inputValue = document.getElementById("input-levenshtein").value;
		var levenshteinValue = document.getElementById("slider-levenshtein").value;
		var levenshteinSelect = document.getElementById("select-levenshtein").value;

		//Set all control elements to readonly
		disableAllControlElementsOnSite();

		//Load data for selected location
		ajaxRequestForSimilaritySearch(inputValue, levenshteinValue, levenshteinSelect);
	}
});

function createHTMLCodeForSearchresultLevenshtein(levenshteinGeoJSON) {
	var htmlData = "";

	//Select box
	htmlData += "<select class='form-select select-location-for-levenshtein-statistics' style='margin-top: 10px'>";
	htmlData += "<option disabled selected value>" + lang.selectLocation + "</option>";
	for (i = 0; i < Object.keys(levenshteinGeoJSON.features).length; i++) {
		var locationId = levenshteinGeoJSON.features[i].properties.lokationId;
		var locationName = levenshteinGeoJSON.features[i].properties.lokationName;

		htmlData += "<option value='" + locationId + "'>" + locationName + "</option>"
	}
	htmlData += "</select><hr>"

	//Footer buttons
	htmlData += "<button class='btn-add-layer-to-layercontrol btn-success btn-footer' title='" + lang.saveLayer + "'><i class='bi bi-bookmark-plus'></br>" + lang.saveLayer + "</i></button>"
	htmlData += "<button class='btn-change-tabname btn-success btn-footer' title='" + lang.renameLayer + "'><i class='bi bi-pencil'></br>" + lang.renameLayer + "</i></button>";
	htmlData += "<button class='btn-download-geojson btn-success btn-footer' title='" + lang.downloadGeojson + "'><i class='bi bi-download'></br>" + lang.downloadGeojson + "</i></button>";

	return htmlData;
}

/** Restores the attribute data when layer is re-enabled in layerControl */
function restoreSearchresultLevenshtein(layer) {
	//Get GeoJSON from leaflet layer
	levenshteinGeoJSON = layer.toGeoJSON();

	tabText = getLayernameFromLayerControl(layer.id)
	htmlData = createHTMLCodeForSearchresultLevenshtein(levenshteinGeoJSON);
	addDataToSearchresult(layer.id, tabText, htmlData);
	disableAddLayerButton(layer.id);
	setColorOfTab("#ececec", layer.id)

	$('#searchresult').addClass('searchresult-levenshtein');
}


/** Updates the levenshtein output value when slider is moved */
$(document).on('input', '#slider-levenshtein', function (e) {
	$('#slider-levenshtein-output').html($(this).val());
});

/** Sets background of input to white when there is an actual input */
$(document).on('input', '#input-levenshtein', function (e) {
	$("#input-levenshtein").css("background-color", "white");
});

/** Listens to click on popup link */
function popupClickLevenshtein(e) {

	//check if link is clicked
	if ($(e.target).closest('a').length) {
		//Get data from target
		var recordId = e.target.getAttribute('data-record-id');
		var recordDescription = e.target.innerText;
		var source = 'levenshtein'
		
		//Load record details
		ajaxRequestForRecorddetails(recordId, recordDescription, source);
	}
};