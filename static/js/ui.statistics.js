/** Creates ajax request for loading statistics data from database and create a layer from it */
function ajaxRequestForStatistics(selectLocationLevel, locationLevelText) {
	$.ajax({
		url: '/searchStatistics',
		type: 'POST',
		contentType: "application/json",
		data: JSON.stringify({"locationLevel": selectLocationLevel })
	}).done(function (statisticsGeoJSON_str) {

		currentlyActiveOption = 'statistics';

		info.onAdd = onAddInfo;
		//Method to update the control based on feature properties passed
		info.update = updateInfo;
		info.addTo(mymap);

		countLocationsWithVouchers = Object.keys(JSON.parse(statisticsGeoJSON_str).features).length
		//Parse GeoJSON data to object
		statisticsGeoJSON = JSON.parse(statisticsGeoJSON_str);

		//Check if GeoJSON has a geometry
		if (Object.keys(statisticsGeoJSON.features).length > 0) {
			//Create Leaflet Layer from GeoJSON
			statisticsLayer = L.geoJson(statisticsGeoJSON, {
				style: style,
				pointToLayer: stylePoint,
				onEachFeature: onEachFeature
			}).addTo(mymap);

			//Set Layer ID generated by leaflet
			statisticsLayer.id = statisticsLayer._leaflet_id;

			//Create HTML and add to searchresult
			htmlData = createHTMLCodeForSearchresultStatistics(countLocationsWithVouchers, statisticsGeoJSON);
			addDataToSearchresult(statisticsLayer.id, locationLevelText, htmlData);

			//Add additional class
			$('#searchresult').addClass('searchresult-statistics');

			//Add Legend
			legend.onAdd = onAddLegend;
			legend.addTo(mymap);

			//Fly to layer
			flyToLayer(statisticsLayer.id);

			//Set Color of tab
			setColorOfTab("#ececec", statisticsLayer.id)
		}
		else {
			alert(lang.noData);
		}

	}).fail(function (jqXHR, textStatus, errorThrown) {
		$("#errorbox").html(lang.loadErrorStatistics + errorThrown);
		$("#errorbox").addClass("fade_animation").on('animationend', function (e) {
			$(this).removeClass("fade_animation").off('animationend');
		});
	}).always(function (jqXHR, textStatus) {
		$("#spinner-statistics").hide();
		enableAllControlElementsOnSite();
	});

}

/** Click on statistics search button  */
$(document).on('click', '#button-statistics', function (e) {

	var selectType = document.getElementById("select-statistic-type").value;
	var selectLocationLevel = document.getElementById("select-statistic-locationlevel").value;
	var selectLocationLevelElement = document.getElementById("select-statistic-locationlevel");
	var locationLevelText = selectLocationLevelElement.options[selectLocationLevelElement.selectedIndex].text; //Get text of select box

	$("#spinner-statistics").show();
	disableAllControlElementsOnSite();

	ajaxRequestForStatistics(selectLocationLevel, locationLevelText)
});


function createHTMLCodeForSearchresultStatistics(countLocations, statisticsGeoJSON) {
	var htmlData = "";

	//Table
	htmlData += "<h5 style='margin-top: 10px;'>"+lang.details+"</h5>"
	htmlData += "<table><tr><th>"+lang.amountLocations+"</th><td>" + countLocations + "</td></tr>"
	htmlData += "</table>"
	htmlData += "<hr>"

	//Select
	htmlData += "<select class='form-select select-location-for-levenshtein-statistics'>";
	htmlData += "<option disabled selected value>"+lang.selectLocation+"</option>";
	for (i = 0; i < Object.keys(statisticsGeoJSON.features).length; i++) {
		var locationId = statisticsGeoJSON.features[i].properties.lokationId;
		var locationName = statisticsGeoJSON.features[i].properties.lokationName;

		htmlData += "<option value='" + locationId + "'>" + locationName + "</option>"

	}
	htmlData += "</select><hr>"

	//Footes buttons
	htmlData += "<button class='btn-add-layer-to-layercontrol btn-success btn-footer' title='" + lang.saveLayer + "'><i class='bi bi-bookmark-plus'></br>" + lang.saveLayer + "</i></button>"
	htmlData += "<button class='btn-change-tabname btn-success btn-footer' title='" + lang.renameLayer + "'><i class='bi bi-pencil'></br>" + lang.renameLayer + "</i></button>";
	htmlData += "<button class='btn-download-geojson btn-success btn-footer' title='" + lang.downloadGeojson + "'><i class='bi bi-download'></br>" + lang.downloadGeojson + "</i></button>";

	return htmlData;
}

/** Change on select control for statistics */
$(document).on('change', '.select-location-for-levenshtein-statistics', function (e) {
	var locationId = e.target.value;
	var layerId = $(this).parent().attr("data-layer-id");

	flyToFeature(layerId, locationId);
});


/** Restores the statistics data when layer is re-enabled in layerControl */
function restoreSearchresultStatistics(layer) {
	//Get GeoJSON from leaflet layer
	statisticsGeoJSON = layer.toGeoJSON();

	countLocationsWithVouchers = Object.keys(statisticsGeoJSON.features).length
	tabText = getLayernameFromLayerControl(layer.id)
	htmlData = createHTMLCodeForSearchresultStatistics(countLocationsWithVouchers, statisticsGeoJSON);
	addDataToSearchresult(layer.id, tabText, htmlData);
	disableAddLayerButton(layer.id);
	setColorOfTab("#ececec", layer.id)

	$('#searchresult').addClass('searchresult-statistics');
}