//Visualquery variables
var drawnItems, drawControl, drawControlRemove, drawnLayerVisualquery;

/** Initialize Visualquery */
function initVisualquery() {
	// FeatureGroup is to store editable layers
	drawnItems = new L.FeatureGroup();
	mymap.addLayer(drawnItems);

	//Create new drawControl Instance
	drawControl = new L.Control.Draw({
		position: 'topright',
		edit: {
			featureGroup: drawnItems,
			edit: false,
			remove: false
		},
		draw: {
			polyline: false,
			marker: false,
			circle: false,
		}
	});

	mymap.addControl(drawControl);

	//Triggered when something is drawn on the map
	mymap.on('draw:created', function (e) {
		var layer = e.layer;

		//Get GeoJSON of the drawn polygon and convert it to WKT
		var visualqueryGeoJSON = e.layer.toGeoJSON();
		var queryPolygonWKT = Terraformer.WKT.convert(visualqueryGeoJSON.geometry);

		//Add Layer to map
		drawnItems.addLayer(layer);
		drawnLayerVisualquery = layer;
		mymap.removeControl(drawControl);

		//Set all control elements to readonly
		disableAllControlElementsOnSite();

		//Load data for selected location
		ajaxRequestForVisualquery(queryPolygonWKT, visualqueryGeoJSON)

	});
}

/** Creates ajax request for loading visualquery data from the database and create a layer from it */
function ajaxRequestForVisualquery(queryPolygon, visualqueryGeoJSON) {

	//Show loading graphic
	$("#spinner-visualquery").show();

	$.ajax({
		url: '/searchVisualquery',
		type: 'POST',
		contentType: "application/json",
		data: JSON.stringify({ "queryPolygon": queryPolygon })
	}).done(function (dict_voucher) {

		var colorValueOfLayer = "#0083ae"; //set color value of layer

		//Store voucher data in GeoJSON
		visualqueryGeoJSON.properties["belege"] = dict_voucher;

		//Create Leaflet Layer from GeoJSON
		visualqueryLayer = L.geoJson(visualqueryGeoJSON, {
			style: function () {
				return {
					color: colorValueOfLayer
				}
			}
		}).addTo(mymap);
		//Set Layer ID generated by leaflet
		visualqueryLayer.id = visualqueryLayer._leaflet_id;

		htmlData = createHTMLCodeForSearchresultVisualquery(visualqueryGeoJSON, colorValueOfLayer)
		addDataToSearchresult(visualqueryLayer.id, lang.query, htmlData);
		setColorOfTab(colorValueOfLayer, visualqueryLayer.id)
		highlightLeafletLayer(visualqueryLayer.id);
		flyToLayer(visualqueryLayer.id)

		//Add additional classes
		$('#searchresult').addClass('searchresult-visualquery');
		$('#searchresult-tabs').addClass('highlightable-tabs');

	}).fail(function (jqXHR, textStatus, errorThrown) {
		$("#errorbox").html(lang.loadErrorVQ + errorThrown);
		$("#errorbox").addClass("fade_animation").on('animationend', function (e) {
			$(this).removeClass("fade_animation").off('animationend');
		});
	}).always(function (jqXHR, textStatus) {
		mymap.addControl(drawControl);
		mymap.removeLayer(drawnLayerVisualquery);

		//Hide loading graphic
		$("#spinner-visualquery").hide();
		//Enable all control elements
		enableAllControlElementsOnSite();
	});
}


function createHTMLCodeForSearchresultVisualquery(visualqueryGeoJSON, colorValue) {

	var htmlData = "";

	//Create button group with vouchers
	htmlData += "<h5 style='margin-top: 10px;'>" + lang.vouchers + "</h5>"

	if (Object.keys(visualqueryGeoJSON.properties["belege"]).length > 0) {

		htmlData += "<div class='btn-group-vertical'>"
		for (const [voucherId, voucherdescription] of Object.entries(visualqueryGeoJSON.properties["belege"])) {
			htmlData += "<button type='button' class='btn button-voucher' data-source='visualquery' data-voucher-id='" + voucherId + "'>" + voucherdescription + "</button>"
		}

		htmlData += "</div>"
	}
	else {
		htmlData += "<p>" + lang.noData + "</p>"
	}
	htmlData += "<hr>"

	//Footes buttons
	htmlData += "<label class='label-style' style='vertical-align: middle'>" + lang.layercolor + "<input type='color' class='color-picker' value='" + colorValue + "'></label></br></br>"
	htmlData += "<button class='btn-add-layer-to-layercontrol btn-success btn-footer' title='" + lang.saveLayer + "'><i class='bi bi-bookmark-plus'></br>" + lang.saveLayer + "</i></button>"
	htmlData += "<button class='btn-change-tabname btn-success btn-footer' title='" + lang.renameLayer + "'><i class='bi bi-pencil'></br>" + lang.renameLayer + "</i></button>";
	htmlData += "<button class='btn-download-geojson btn-success btn-footer' title='" + lang.downloadGeojson + "'><i class='bi bi-download'></br>" + lang.downloadGeojson + "</i></button>";

	return htmlData;
}

/** Restores the visualquery data when layer is re-enabled in layerControl */
function restoreSearchresultVisualquery(layer) {

	//Get GeoJSON from leaflet layer
	visualqueryData = layer.toGeoJSON();
	visualqueryData = visualqueryData.features[0]; //FeatureCollection->Feature

	var colorValueOfLayer = getColorFromLayer(layer.id);

	tabText = getLayernameFromLayerControl(layer.id)
	htmlData = createHTMLCodeForSearchresultVisualquery(visualqueryData, colorValueOfLayer)
	addDataToSearchresult(layer.id, tabText, htmlData);
	setColorOfTab(colorValueOfLayer, layer.id)
	highlightLeafletLayer(layer.id);
	flyToLayer(layer.id)
	disableAddLayerButton(layer.id);

	$('#searchresult').addClass('searchresult-visualquery');
	$('#searchresult-tabs').addClass('highlightable-tabs');

}