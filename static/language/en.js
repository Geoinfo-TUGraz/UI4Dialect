lang = {
    "file": "en.js",
    "fileLanguage": "en",
    "otherLanguageShort": "de",
    "otherLanguageLong": "Deutsch",
    "titleIndex": "UI4Dialect | EN",
    "titleSimple": "UI4Dialect (Simple) | EN",
    "titleAdvanced": "UI4Dialect (Advanced) | EN",
    "headerIndex": "UI4Dialect",
    "headerSimple": "UI4Dialect (Simple)",
    "headerAdvanced": "UI4Dialect (Advanced)",

    "location": "Location",
    "lemma": "Lemma",
    "vq": "Visual Query",
    "levenshtein": "Levenshtein",
    "statistics": "Statistics",
    "nl2sparql": "NL 2 SPARQL",
    "tooltipLocation": "Search for locations",
    "tooltipLemma": "Search for lemmata",
    "tooltipVQ": "Search for vouchers using a visual query",
    "tooltipLevenshtein": "Search for similar vouchers using the Levenshtein Distance",
    "tooltipStatistics": "Show data statistics",
    "tooltipNl2sparql": "Translate natural language questions into SPARQl queries",
    "tooltipMinMaximize": "Minimize/maximize",

    "place": "Place",
    "municipality": "Municipality",
    "region": "Region",
    "autocompleteLocation": "Search for location",
    "autocompleteLemma": "Search for lemma",
    "vouchers": "Vouchers",
    "voucher": "Voucher",
    "regions": "Regions",
    "municipalities": "Municipalities",
    "places": "Places",
    "peopleBorn": "born here",
    "peopleDied": "died here",
    "loadDataLocation": "Load data (Location)...",
    "loadDataLemma": "Load data (Lemma)...",
    
    "layercolor": "Layercolor:",
    "saveLayer": "Save layer",
    "renameLayer": "Rename layer...",
    "downloadGeojson": "Download GeoJSON",
    "changeText": "Enter a new name for the layer:",
    "removeLayer": "Remove layer",
    "closeTab": "Close tab",

    "details": "Details",
    "voucher_description": "Voucherdescription",
    "mainLemma": "Main lemma",
    "secondaryLemma": "Secondary lemma",
    "standardGerman": "Standard German",
    "meaning": "Meaning",
    "source": "Source:",
    "title": "Title",
    "author": "Author",
    "releaseYear": "Year of release",
    "usedIn": "Used in:",
    "additionalInformation": "Additional information:",
    "dbpedia": "DBPedia",
    "picture": "Picture",

    "lemma": "Lemma",
    "filter": "Filter",
    "showAll": "Show all",
    "showPlace": "Show places",
    "showMunicipality": "Show municipalities",
    "showRegion": "Show regions",
    "selectPlace": "Select place...",
    "selectMunicipality": "Select municipality...",
    "selectRegion": "Select region...",
    "voucher_s": "Voucher(s)",

    "infoVQ": "Draw a rectangle or a polygon on the map to load all vouchers in this area (places, municipalities) ",
    "query": "Query",

    "startingWord": "Starting word",
    "enterLemma": "Enter word...",
    "levDist": "Levenshtein distance",
    "level": "Level",
    "search": "Search",
    "selectLocation": "Select Location...",
    "hoverPolygon": "Hover over a polygon",

    "showStats": "Show statistics for",
    "amountLocations": "Amount of locations:",
    "amountVouchers": "Amount of vouchers: ",

    "question": "Question",
    "enterQuestion": "Enter question...",
    "translate": "Execute query",
    "result": "Result:",
    "examples": "Examples:",

    "tooltipHelp": "Show help",
    "tooltipCloseHelp": "Close help",
    "help": "Help",
    
    "concept": "Description:",
    "userInteraction": "Functionality:",
    "helpSearchForLocation": "Search for location (Location)",
    "helpSearchForLemma": "Search for lemma (Lemma)",
    "helpVisualQuery": "Visual Query (Visual Query)",
    "helpLevenshtein": "Search for vouchers using the Levenshtein Distance (Levenshtein)",
    "helpStatistics": "Load statistics (Statistics)",
    "helpNL2SPARQL": "Translate natural questions into SPARQL queries (NL2 SPARQL)",
    "helpAdditionalFunctions": "Additional Functions",

    "conceptLocation": "The user can search for locations, municipalities or regions and get data associated to them.",
    "conceptLemma": "The user can search for a lemmata to get data associated to them.",
    "conceptVisualQuery": "The user can search for vouchers using a visual query.",
    "conceptLevenshtein": "The user can search for similar vouchers based on a word and a certain Levenshtein distance.",
    "conceptStatistics": "The user can load data statistics.",
    "conceptNL2SPARQL": "The user can enter questions in natural language, have them translated into a SPARQL query and then have them executed.",

    "userInteractionLocation": "In the tab \"Location\" one can search for places, municipalities or regions. If at least 3 letters are entered, search results will be displayed. If a search suggestion is selected, the associated data are loaded. The search results show vouchers, associated regions, municipalities or places, as well as people who are associated with this location. If a voucher is selected, details about this voucher are loaded. If a region, municipality or place is selected in the searchresult, this location is then searched for.",
    "userInteractionLemma": "In the tab \"Lemma\" one can search for DBO lemmata. If at least 3 letters are entered, search results will be displayed. If a search suggestion is selected, the associated data are loaded. The search results show the lemma, the standard german word and a DBPedia link. In addition, the locations in which this lemma occurs, are loaded. In the first drop-down menu the location level can be chosen. In the other three drop-down menus, specific locations can be selected and viewed on the map. If one clicks on a location on the map, the associated voucher(s) can be viewed. With a click on a voucher, details about this voucher can also be loaded.",
    "userInteractionVisualQuery": "In the tab \"Visual Query\" one can search for vouchers. A polygon or a rectangle can be drawn on the map using the controls on the right-hand side of the map. All vouchers are loaded that are assigned to places or municipalities that intersect with the selected area. Once the data has been loaded, a voucher can be selected. Additional information is then loaded for this voucher.",
    "userInteractionLevenshtein": "In the \"Levenshtein\" tab one can search for similar voucher words. A starting word can be entered in the first textbox (e.g. Karotte). Using the slider the user can set the desired Levenshtein distance. The desired location level (places, municipalities, regions) can be selected in the drop-down menu. A click on \"Search\" starts the search for similar voucherwords. All locations in which vouchers were found are displayed in the search results. A color scale indicates how many vouchers were found per location. With a click on a location, all vouchers associated to this location will be displayed. If a voucher is selected, additional information is loaded. A specific location can be selected in the drop-down menu of the search result.",
    "userInteractionStatistics": "In the tab \"Statistics\" one can load data statistics. The desired location level can be selected in the second drop-down menu. A click on \"Search\" starts the query. If the search results have been loaded, all locations in which vouchers occur are displayed on the map. A color scale indicates how many vouchers were found per location. With a click on a location one can see how many vouchers are assigned to this location. A specific location can be selected in the drop-down menu of the search result.",
    "userInteractionNL2SPARQL1": "In the tab \"NL 2 SPARQL\" questions can be entered in natural language. Examples:",
    "question1": "Welche Belege gibt es in Ort/Gemeinde/Region xy?",
    "question2": "Welche Lemmata gibt es in Ort/Gemeinde/Region xy?",
    "question3": "Wo gibt es Lemma/Beleg xy?",
    "question4":"Welche Bedeutung hat der Beleg xy?",
    "question5":"Welche Orte/Gemeinden/Regionen liegen innerhalb der Gemeinde/Region xy?",
    "question6":"Welche Orte/Gemeinden/Regionen schneiden sich mit Ort/Gemeinde/Region xy?",
    "question7":"Welche Orte/Gemeinden/Regionen ber√ºhren Ort/Gemeinde/Region xy?",
    "userInteractionNL2SPARQL2": "If a question has been entered and the \"Execute query\" button is pressed, the question is analyzed and an attempt is made to translate this question into a SPARQL query. If the process was successful, the SPARQL query is executed and the data are loaded.",
    "userInteractionSaveLayer": "A layer can be saved. To do this, the button \"Save layer\" must be clicked in the search result. The layers are displayed on the right-hand side in the LayerControl window. The layer can be shown or hidden there. In addition, the entire layer can be deleted by clicking on the \"x\" button. The saved layers are only displayed if the corresponding tab in the searchbox is selected. For example, if a lemma layer is saved, it will only be displayed if the \"Lemma\" tab is selected in the search box."  ,
    "userInteractionRenameLayer": "A layer can be renamed. To do this, the button \"Rename layer\" must be clicked in the search result. An input window appears and the user can enter a new title for the layer. The layer name is changed in the tab of the search result as well as in the LayerControl.",
    "userInteractionDownloadGeoJSON": "The data of a layer can also be downloaded as GeoJSON. To do this, the button \"Download GeoJSON\" must be clicked in the search result. All geometries as well as the associated dialect data are stored in this GeoJSON file. If a location has no geometry, the geometry is set as a point with the coordinates (0,0).",

    "selectOption": "Please select an option from the list!",
    "error": "Error!",
    "loadErrorAutocomplete": "No data loaded",
    "loadInfoGeometry": "INFO: No geometry available!",
    "loadInfoData": "INFO: No data found!",
    "noGeometry": "No geometry",
    "loadInfoNoLocation": "INFO: No associated location found! ",
    "loadErrorLocation": "Error while loading the location data: ",
    "loadErrorLemma": "Error while loading the lemma data: ",
    "loadErrorVQ": "Error while loading the data: ",
    "loadErrorLevenshtein": "Error while loading the levenshtein data: ",
    "loadErrorStatistics": "Error while loading the statistics data: ",
    "loadErrorVoucherdetails": "Error while loading the voucherdetails: ",
    "loadErrorNL2SPARQL": "Error while executing NL2SPARQL: ",
    "noData": "--No data available--"
}